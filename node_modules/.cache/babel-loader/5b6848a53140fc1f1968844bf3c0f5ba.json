{"ast":null,"code":"var _jsxFileName = \"/Users/jakestraptop/Desktop/jake_budget_app/src/Contexts/BudgetContext.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useContext, useState } from 'react';\nimport { v4 as uuidV4 } from 'uuid';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BudgetsContext = /*#__PURE__*/React.createContext();\nexport function useBudgets() {\n  _s();\n\n  return useContext(BudgetsContext);\n}\n\n_s(useBudgets, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nexport const BudgetsProvider = _ref => {\n  _s2();\n\n  let {\n    children\n  } = _ref;\n  const [budgets, setBudgets] = useState([]);\n  const [expenses, setExpenses] = useState([]);\n\n  function getBudgetExpenses(budgetId) {\n    // This will return only expenses that have the budgetId of the budget Id that we pass in \n    // If we passed in \"entertainment\" into the budgetId. It would only show expenses that have \"entertainment\" as the budgetId\n    return expenses.filter(expense => expense.budgetId === budgetId);\n  }\n\n  function addExpense(_ref2) {\n    let {\n      description,\n      amount,\n      budgetId\n    } = _ref2;\n    setExpenses(prevExpenses => {\n      return [...prevExpenses, {\n        id: uuidV4(),\n        name,\n        max\n      }];\n    });\n  }\n\n  function addBudget(_ref3) {\n    let {\n      name,\n      max\n    } = _ref3;\n    setBudgets(prevBudgets => {\n      // If the previous budget has is same name as another budget in the list, return the previous budgets \n      if (prevBudgets.find(budget => budget.name === name)) {\n        return prevBudgets;\n      }\n\n      return [...prevBudgets, {\n        id: uuidV4(),\n        name,\n        max\n      }];\n    });\n  }\n\n  function deleteBudget() {}\n\n  function deleteExpense() {}\n\n  return /*#__PURE__*/_jsxDEV(BudgetsContext.Provider, {\n    value: {\n      // This will be available to anything wrapped in this context. We wrapped the whole document in this context. So that means that this whole document will have access to these values\n      budgets,\n      expenses,\n      getBudgetExpenses,\n      addExpense,\n      addBudget,\n      deleteBudget,\n      deleteExpense\n    },\n    children: [\" \", children, \" \"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 12\n  }, this);\n};\n\n_s2(BudgetsProvider, \"r2M0Py5GGNrQbEix8Jxz8IIJYS0=\");\n\n_c = BudgetsProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"BudgetsProvider\");","map":{"version":3,"sources":["/Users/jakestraptop/Desktop/jake_budget_app/src/Contexts/BudgetContext.js"],"names":["React","useContext","useState","v4","uuidV4","BudgetsContext","createContext","useBudgets","BudgetsProvider","children","budgets","setBudgets","expenses","setExpenses","getBudgetExpenses","budgetId","filter","expense","addExpense","description","amount","prevExpenses","id","name","max","addBudget","prevBudgets","find","budget","deleteBudget","deleteExpense"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,QAA5B,QAA4C,OAA5C;AACA,SAASC,EAAE,IAAIC,MAAf,QAA6B,MAA7B;;AAEA,MAAMC,cAAc,gBAAGL,KAAK,CAACM,aAAN,EAAvB;AAEA,OAAO,SAASC,UAAT,GAAsB;AAAA;;AACzB,SAAON,UAAU,CAACI,cAAD,CAAjB;AACH;;GAFeE,U;;AAIhB,OAAO,MAAMC,eAAe,GAAG,QAAgB;AAAA;;AAAA,MAAf;AAACC,IAAAA;AAAD,GAAe;AAC3C,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBT,QAAQ,CAAC,EAAD,CAAtC;AACA,QAAM,CAACU,QAAD,EAAWC,WAAX,IAA0BX,QAAQ,CAAC,EAAD,CAAxC;;AAEA,WAASY,iBAAT,CAA2BC,QAA3B,EAAqC;AACjC;AACA;AACA,WAAOH,QAAQ,CAACI,MAAT,CAAgBC,OAAO,IAAIA,OAAO,CAACF,QAAR,KAAqBA,QAAhD,CAAP;AACH;;AAED,WAASG,UAAT,QAAyD;AAAA,QAApC;AAAEC,MAAAA,WAAF;AAAeC,MAAAA,MAAf;AAAuBL,MAAAA;AAAvB,KAAoC;AACrDF,IAAAA,WAAW,CAACQ,YAAY,IAAI;AAExB,aAAO,CAAC,GAAGA,YAAJ,EAAkB;AAAEC,QAAAA,EAAE,EAAElB,MAAM,EAAZ;AAAgBmB,QAAAA,IAAhB;AAAsBC,QAAAA;AAAtB,OAAlB,CAAP;AACH,KAHU,CAAX;AAIH;;AAED,WAASC,SAAT,QAAkC;AAAA,QAAd;AAACF,MAAAA,IAAD;AAAOC,MAAAA;AAAP,KAAc;AAC9Bb,IAAAA,UAAU,CAACe,WAAW,IAAI;AACtB;AACA,UAAGA,WAAW,CAACC,IAAZ,CAAiBC,MAAM,IAAIA,MAAM,CAACL,IAAP,KAAgBA,IAA3C,CAAH,EAAqD;AACjD,eAAOG,WAAP;AACH;;AACD,aAAO,CAAC,GAAGA,WAAJ,EAAiB;AAAEJ,QAAAA,EAAE,EAAElB,MAAM,EAAZ;AAAgBmB,QAAAA,IAAhB;AAAsBC,QAAAA;AAAtB,OAAjB,CAAP;AACH,KANS,CAAV;AAQH;;AAED,WAASK,YAAT,GAAwB,CAEvB;;AAED,WAASC,aAAT,GAAyB,CAExB;;AAED,sBAAO,QAAC,cAAD,CAAgB,QAAhB;AAAyB,IAAA,KAAK,EAAE;AACnC;AACApB,MAAAA,OAFmC;AAGnCE,MAAAA,QAHmC;AAInCE,MAAAA,iBAJmC;AAKnCI,MAAAA,UALmC;AAMnCO,MAAAA,SANmC;AAOnCI,MAAAA,YAPmC;AAQnCC,MAAAA;AARmC,KAAhC;AAAA,oBAUFrB,QAVE;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AAWH,CA/CM;;IAAMD,e;;KAAAA,e","sourcesContent":["import React, { useContext, useState } from 'react' \nimport { v4 as uuidV4 } from 'uuid'\n\nconst BudgetsContext = React.createContext() \n\nexport function useBudgets() { \n    return useContext(BudgetsContext)\n}\n\nexport const BudgetsProvider = ({children}) => { \n    const [budgets, setBudgets] = useState([])\n    const [expenses, setExpenses] = useState([])\n\n    function getBudgetExpenses(budgetId) { \n        // This will return only expenses that have the budgetId of the budget Id that we pass in \n        // If we passed in \"entertainment\" into the budgetId. It would only show expenses that have \"entertainment\" as the budgetId\n        return expenses.filter(expense => expense.budgetId === budgetId)\n    }\n\n    function addExpense( { description, amount, budgetId } ) { \n        setExpenses(prevExpenses => { \n         \n            return [...prevExpenses, { id: uuidV4(), name, max}]\n        })\n    }\n\n    function addBudget( {name, max} ) { \n        setBudgets(prevBudgets => { \n            // If the previous budget has is same name as another budget in the list, return the previous budgets \n            if(prevBudgets.find(budget => budget.name === name)) { \n                return prevBudgets\n            }\n            return [...prevBudgets, { id: uuidV4(), name, max}]\n        })\n\n    }\n\n    function deleteBudget() { \n\n    }\n\n    function deleteExpense() { \n        \n    }\n\n    return <BudgetsContext.Provider value={{\n        // This will be available to anything wrapped in this context. We wrapped the whole document in this context. So that means that this whole document will have access to these values\n        budgets, \n        expenses, \n        getBudgetExpenses, \n        addExpense, \n        addBudget, \n        deleteBudget, \n        deleteExpense\n\n    }}> {children} </BudgetsContext.Provider>\n}"]},"metadata":{},"sourceType":"module"}