{"ast":null,"code":"var _jsxFileName = \"/Users/jakestraptop/Desktop/React.Js/jake_budget_app/src/Contexts/BudgetContext.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useContext } from 'react';\nimport { v4 as uuidV4 } from 'uuid';\nimport useLocalStorage from '../Hooks/useLocalStorage'; // Store the budgets\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BudgetsContext = /*#__PURE__*/React.createContext(); // Store the Uncategorized Budget ID\n\nexport const UNCATEGORIZED_BUDGET_ID = \"Uncategorized\";\nexport function useBudgets() {\n  _s();\n\n  return useContext(BudgetsContext);\n}\n\n_s(useBudgets, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nexport const BudgetsProvider = _ref => {\n  _s2();\n\n  let {\n    children\n  } = _ref;\n  // Save the state to local storage\n  const [budgets, setBudgets] = useLocalStorage(\"budgets\", []);\n  const [expenses, setExpenses] = useLocalStorage(\"expenses\", []);\n\n  function getBudgetExpenses(budgetId) {\n    // This will return only expenses that have the budgetId of the budget Id that we pass in \n    // If we passed in \"entertainment\" into the budgetId. It would only show expenses that have \"entertainment\" as the budgetId\n    return expenses.filter(expense => expense.budgetId === budgetId);\n  }\n\n  function addExpense(_ref2) {\n    let {\n      description,\n      amount,\n      budgetId\n    } = _ref2;\n    setExpenses(prevExpenses => {\n      return [...prevExpenses, {\n        id: uuidV4(),\n        description,\n        amount,\n        budgetId\n      }];\n    });\n  }\n\n  function addBudget(_ref3) {\n    let {\n      name,\n      max\n    } = _ref3;\n    setBudgets(prevBudgets => {\n      // If the previous budget has is same name as another budget in the list, return the previous budgets \n      if (prevBudgets.find(budget => budget.name === name)) {\n        return prevBudgets;\n      }\n\n      return [...prevBudgets, {\n        id: uuidV4(),\n        name,\n        max\n      }];\n    });\n  } // This will delete the budget that matches the id of the budget that was clicked on\n\n\n  function deleteBudget(_ref4) {\n    let {\n      id\n    } = _ref4;\n    // Get the previous expense \n    setExpenses(prevExpenses => {\n      return prevExpenses.map(expense => {\n        // Check to see if the budget still exists. if it does, leave it alone\n        if (expense.budgetId !== id) return expense; // If not... Take the whole expense, keep everything the same and give the budgetId a value of \"Undefined\"\n\n        return { ...expense,\n          budgetId: UNCATEGORIZED_BUDGET_ID\n        };\n      });\n    });\n    setBudgets(prevBudgets => {\n      return prevBudgets.filter(budget => budget.id !== id);\n    });\n  } // This will delete the budget that matches the id of the budget that was clicked on\n\n\n  function deleteExpense(_ref5) {\n    let {\n      id\n    } = _ref5;\n    setExpenses(prevExpenses => {\n      return prevExpenses.filter(expense => expense.id !== id);\n    });\n  }\n\n  return /*#__PURE__*/_jsxDEV(BudgetsContext.Provider, {\n    value: {\n      // This will be available to anything wrapped in this context. We wrapped the whole document in this context. So that means that this whole document will have access to these values\n      budgets,\n      expenses,\n      getBudgetExpenses,\n      addExpense,\n      addBudget,\n      deleteBudget,\n      deleteExpense\n    },\n    children: [\" \", children, \" \"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 12\n  }, this);\n};\n\n_s2(BudgetsProvider, \"J7E4d7guQZ/gp2cZLJi5v6QwLyA=\", false, function () {\n  return [useLocalStorage, useLocalStorage];\n});\n\n_c = BudgetsProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"BudgetsProvider\");","map":{"version":3,"sources":["/Users/jakestraptop/Desktop/React.Js/jake_budget_app/src/Contexts/BudgetContext.js"],"names":["React","useContext","v4","uuidV4","useLocalStorage","BudgetsContext","createContext","UNCATEGORIZED_BUDGET_ID","useBudgets","BudgetsProvider","children","budgets","setBudgets","expenses","setExpenses","getBudgetExpenses","budgetId","filter","expense","addExpense","description","amount","prevExpenses","id","addBudget","name","max","prevBudgets","find","budget","deleteBudget","map","deleteExpense"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,QAAkC,OAAlC;AACA,SAASC,EAAE,IAAIC,MAAf,QAA6B,MAA7B;AACA,OAAOC,eAAP,MAA4B,0BAA5B,C,CAEA;;;AACA,MAAMC,cAAc,gBAAGL,KAAK,CAACM,aAAN,EAAvB,C,CACA;;AACA,OAAO,MAAMC,uBAAuB,GAAG,eAAhC;AAGP,OAAO,SAASC,UAAT,GAAsB;AAAA;;AACzB,SAAOP,UAAU,CAACI,cAAD,CAAjB;AACH;;GAFeG,U;;AAIhB,OAAO,MAAMC,eAAe,GAAG,QAAgB;AAAA;;AAAA,MAAf;AAACC,IAAAA;AAAD,GAAe;AAC3C;AACA,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBR,eAAe,CAAC,SAAD,EAAY,EAAZ,CAA7C;AACA,QAAM,CAACS,QAAD,EAAWC,WAAX,IAA0BV,eAAe,CAAC,UAAD,EAAa,EAAb,CAA/C;;AAEA,WAASW,iBAAT,CAA2BC,QAA3B,EAAqC;AACjC;AACA;AACA,WAAOH,QAAQ,CAACI,MAAT,CAAgBC,OAAO,IAAIA,OAAO,CAACF,QAAR,KAAqBA,QAAhD,CAAP;AACH;;AAED,WAASG,UAAT,QAAyD;AAAA,QAApC;AAAEC,MAAAA,WAAF;AAAeC,MAAAA,MAAf;AAAuBL,MAAAA;AAAvB,KAAoC;AACrDF,IAAAA,WAAW,CAACQ,YAAY,IAAI;AACxB,aAAO,CAAC,GAAGA,YAAJ,EAAkB;AAAEC,QAAAA,EAAE,EAAEpB,MAAM,EAAZ;AAAgBiB,QAAAA,WAAhB;AAA6BC,QAAAA,MAA7B;AAAqCL,QAAAA;AAArC,OAAlB,CAAP;AACH,KAFU,CAAX;AAGH;;AAED,WAASQ,SAAT,QAAkC;AAAA,QAAd;AAACC,MAAAA,IAAD;AAAOC,MAAAA;AAAP,KAAc;AAC9Bd,IAAAA,UAAU,CAACe,WAAW,IAAI;AACtB;AACA,UAAGA,WAAW,CAACC,IAAZ,CAAiBC,MAAM,IAAIA,MAAM,CAACJ,IAAP,KAAgBA,IAA3C,CAAH,EAAqD;AACjD,eAAOE,WAAP;AACH;;AACD,aAAO,CAAC,GAAGA,WAAJ,EAAiB;AAAEJ,QAAAA,EAAE,EAAEpB,MAAM,EAAZ;AAAgBsB,QAAAA,IAAhB;AAAsBC,QAAAA;AAAtB,OAAjB,CAAP;AACH,KANS,CAAV;AAQH,GA1B0C,CA4B3C;;;AACA,WAASI,YAAT,QAA8B;AAAA,QAAR;AAAEP,MAAAA;AAAF,KAAQ;AAC1B;AACAT,IAAAA,WAAW,CAACQ,YAAY,IAAI;AACxB,aAAOA,YAAY,CAACS,GAAb,CAAiBb,OAAO,IAAI;AAC/B;AACA,YAAGA,OAAO,CAACF,QAAR,KAAqBO,EAAxB,EAA4B,OAAOL,OAAP,CAFG,CAG/B;;AACA,eAAO,EAAE,GAAGA,OAAL;AAAeF,UAAAA,QAAQ,EAAGT;AAA1B,SAAP;AACH,OALM,CAAP;AAMH,KAPU,CAAX;AAQAK,IAAAA,UAAU,CAACe,WAAW,IAAI;AACtB,aAAOA,WAAW,CAACV,MAAZ,CAAmBY,MAAM,IAAIA,MAAM,CAACN,EAAP,KAAcA,EAA3C,CAAP;AACH,KAFS,CAAV;AAGH,GA1C0C,CA4C3C;;;AACA,WAASS,aAAT,QAAiC;AAAA,QAAT;AAAET,MAAAA;AAAF,KAAS;AAC7BT,IAAAA,WAAW,CAACQ,YAAY,IAAI;AACxB,aAAOA,YAAY,CAACL,MAAb,CAAoBC,OAAO,IAAIA,OAAO,CAACK,EAAR,KAAeA,EAA9C,CAAP;AACH,KAFU,CAAX;AAGH;;AAED,sBAAO,QAAC,cAAD,CAAgB,QAAhB;AAAyB,IAAA,KAAK,EAAE;AACnC;AACAZ,MAAAA,OAFmC;AAGnCE,MAAAA,QAHmC;AAInCE,MAAAA,iBAJmC;AAKnCI,MAAAA,UALmC;AAMnCK,MAAAA,SANmC;AAOnCM,MAAAA,YAPmC;AAQnCE,MAAAA;AARmC,KAAhC;AAAA,oBAUFtB,QAVE;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AAWH,CA9DM;;IAAMD,e;UAEqBL,e,EACEA,e;;;KAHvBK,e","sourcesContent":["import React, { useContext } from 'react' \nimport { v4 as uuidV4 } from 'uuid'\nimport useLocalStorage from '../Hooks/useLocalStorage'\n\n// Store the budgets\nconst BudgetsContext = React.createContext() \n// Store the Uncategorized Budget ID\nexport const UNCATEGORIZED_BUDGET_ID = \"Uncategorized\"\n\n\nexport function useBudgets() { \n    return useContext(BudgetsContext)\n}\n\nexport const BudgetsProvider = ({children}) => { \n    // Save the state to local storage\n    const [budgets, setBudgets] = useLocalStorage(\"budgets\", [])\n    const [expenses, setExpenses] = useLocalStorage(\"expenses\", [])\n    \n    function getBudgetExpenses(budgetId) { \n        // This will return only expenses that have the budgetId of the budget Id that we pass in \n        // If we passed in \"entertainment\" into the budgetId. It would only show expenses that have \"entertainment\" as the budgetId\n        return expenses.filter(expense => expense.budgetId === budgetId)\n    }\n\n    function addExpense( { description, amount, budgetId } ) { \n        setExpenses(prevExpenses => { \n            return [...prevExpenses, { id: uuidV4(), description, amount, budgetId}]\n        })\n    }\n\n    function addBudget( {name, max} ) { \n        setBudgets(prevBudgets => { \n            // If the previous budget has is same name as another budget in the list, return the previous budgets \n            if(prevBudgets.find(budget => budget.name === name)) { \n                return prevBudgets\n            }\n            return [...prevBudgets, { id: uuidV4(), name, max}]\n        })\n\n    }\n\n    // This will delete the budget that matches the id of the budget that was clicked on\n    function deleteBudget({ id }) { \n        // Get the previous expense \n        setExpenses(prevExpenses => { \n            return prevExpenses.map(expense => { \n                // Check to see if the budget still exists. if it does, leave it alone\n                if(expense.budgetId !== id) return expense\n                // If not... Take the whole expense, keep everything the same and give the budgetId a value of \"Undefined\"\n                return { ...expense , budgetId : UNCATEGORIZED_BUDGET_ID}\n            })\n        })\n        setBudgets(prevBudgets => { \n            return prevBudgets.filter(budget => budget.id !== id)\n        })\n    }\n   \n    // This will delete the budget that matches the id of the budget that was clicked on\n    function deleteExpense( { id } ) { \n        setExpenses(prevExpenses => { \n            return prevExpenses.filter(expense => expense.id !== id)\n        })\n    }\n\n    return <BudgetsContext.Provider value={{\n        // This will be available to anything wrapped in this context. We wrapped the whole document in this context. So that means that this whole document will have access to these values\n        budgets, \n        expenses, \n        getBudgetExpenses, \n        addExpense, \n        addBudget, \n        deleteBudget, \n        deleteExpense\n\n    }}> {children} </BudgetsContext.Provider>\n}"]},"metadata":{},"sourceType":"module"}