{"ast":null,"code":"var _jsxFileName = \"/Users/jakestraptop/Desktop/React.Js/jake_budget_app/src/Components/AddExpenseModal.js\",\n    _s = $RefreshSig$();\n\nimport { Form, Modal, Button } from 'react-bootstrap';\nimport ModalHeader from 'react-bootstrap/esm/ModalHeader';\nimport { useRef } from 'react';\nimport { useBudgets } from \"../Contexts/BudgetContext\";\nimport { UNCATEGORIZED_BUDGET_ID } from '../Contexts/BudgetContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function AddExpenseModal(_ref) {\n  _s();\n\n  let {\n    show,\n    handleClose,\n    defaultBudgetId\n  } = _ref;\n  // Create a reference that references the variables that are stored when the dialog box pops up asking for information \n  const descriptionRef = useRef();\n  const amountRef = useRef();\n  const budgetIdRef = useRef(); // Custom Hook \n\n  const {\n    addExpense,\n    budgets\n  } = useBudgets(); // We are getting the functions that we made in the BudgetContext.js file \n\n  function handleSubmit(e) {\n    e.preventDefault(); // Prevent the form from submitting \n    // Add Budget function\n\n    addExpense({\n      descriptionRef: descriptionRef.current.value,\n      // This will add a name that is the current value of the input \n      amount: parseFloat(amountRef.current.value),\n      // This will add a max value that the user will input.\n      budgetId: budgetIdRef.current.value\n    });\n    handleClose(); // When we submit the form, the modal will close  \n  }\n\n  return /*#__PURE__*/_jsxDEV(Modal, {\n    show: show,\n    onHide: handleClose,\n    children: /*#__PURE__*/_jsxDEV(Form, {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(Modal.Header, {\n        closeButton: true,\n        children: /*#__PURE__*/_jsxDEV(Modal.Title, {\n          children: \"New Expense\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Modal.Body, {\n        children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n          className: \"mb-3\",\n          controlId: \"description\",\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            children: \" Description \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 37,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n            ref: descriptionRef,\n            type: \"text\",\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 38,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n          className: \"mb-3\",\n          controlId: \"amount\",\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            children: \" Amount \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 41,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n            ref: amountRef,\n            type: \"number\",\n            required: true,\n            min: 0,\n            step: 0.01\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 42,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n          className: \"mb-3\",\n          controlId: \"budgetId\",\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            children: \" Budget \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Form.Select, {\n            defaultValue: defaultBudgetId,\n            ref: budgetIdRef,\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              id: UNCATEGORIZED_BUDGET_ID,\n              children: \" Uncategorized \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 56,\n              columnNumber: 29\n            }, this), budgets.map(budget => /*#__PURE__*/_jsxDEV(\"option\", {\n              value: budget.id,\n              children: [\" \", budget.name, \" \"]\n            }, budget.id, true, {\n              fileName: _jsxFileName,\n              lineNumber: 58,\n              columnNumber: 33\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"d-flex justify-content-end\",\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"primary\",\n            type: \"submit\",\n            children: \" Add \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 9\n  }, this);\n}\n\n_s(AddExpenseModal, \"JM4E1WYUOd9CiG/Emdwddeg7mRw=\", false, function () {\n  return [useBudgets];\n});\n\n_c = AddExpenseModal;\n\nvar _c;\n\n$RefreshReg$(_c, \"AddExpenseModal\");","map":{"version":3,"sources":["/Users/jakestraptop/Desktop/React.Js/jake_budget_app/src/Components/AddExpenseModal.js"],"names":["Form","Modal","Button","ModalHeader","useRef","useBudgets","UNCATEGORIZED_BUDGET_ID","AddExpenseModal","show","handleClose","defaultBudgetId","descriptionRef","amountRef","budgetIdRef","addExpense","budgets","handleSubmit","e","preventDefault","current","value","amount","parseFloat","budgetId","map","budget","id","name"],"mappings":"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","sourcesContent":["import { Form, Modal, Button } from 'react-bootstrap'; \nimport ModalHeader from 'react-bootstrap/esm/ModalHeader';\nimport { useRef } from 'react'\nimport { useBudgets } from \"../Contexts/BudgetContext\"\nimport { UNCATEGORIZED_BUDGET_ID } from '../Contexts/BudgetContext';\n\n\nexport default function AddExpenseModal( { show, handleClose, defaultBudgetId } ) {\n    // Create a reference that references the variables that are stored when the dialog box pops up asking for information \n    const descriptionRef = useRef() \n    const amountRef = useRef()\n    const budgetIdRef = useRef()\n\n    // Custom Hook \n    const { addExpense, budgets } = useBudgets()  // We are getting the functions that we made in the BudgetContext.js file \n\n    function handleSubmit(e) { \n        e.preventDefault() // Prevent the form from submitting \n        \n        // Add Budget function\n        addExpense({ \n            descriptionRef: descriptionRef.current.value, // This will add a name that is the current value of the input \n            amount: parseFloat(amountRef.current.value),  // This will add a max value that the user will input.\n            budgetId: budgetIdRef.current.value\n        })\n        handleClose() // When we submit the form, the modal will close  \n\n    }\n    return (\n        <Modal show={show} onHide={handleClose} >\n            <Form onSubmit={handleSubmit} > \n                <Modal.Header closeButton> \n                    <Modal.Title>New Expense</Modal.Title>\n                </Modal.Header>\n                <Modal.Body> \n                    <Form.Group className=\"mb-3\" controlId=\"description\"> \n                        <Form.Label> Description </Form.Label>\n                        <Form.Control ref={descriptionRef} type=\"text\" required />\n                    </Form.Group>\n                    <Form.Group className=\"mb-3\" controlId=\"amount\"> \n                        <Form.Label> Amount </Form.Label>\n                        <Form.Control \n                            ref={amountRef} \n                            type=\"number\" \n                            required \n                            min={0} \n                            step={0.01} \n                        />\n                    </Form.Group>\n                    <Form.Group className=\"mb-3\" controlId=\"budgetId\"> \n                        <Form.Label> Budget </Form.Label>\n                        <Form.Select \n                            defaultValue={defaultBudgetId}\n                            ref={budgetIdRef} \n                        >\n                            <option id={UNCATEGORIZED_BUDGET_ID}> Uncategorized </option>\n                            {budgets.map(budget => (\n                                <option key={budget.id} value={budget.id}> {budget.name} </option>\n                            ))}\n                        </Form.Select>\n                    </Form.Group>\n                    <div className=\"d-flex justify-content-end\"> \n                        <Button variant=\"primary\" type=\"submit\"> Add </Button>\n                    </div>\n                </Modal.Body>\n            </Form>\n        </Modal>\n    )\n}\n"]},"metadata":{},"sourceType":"module"}