{"ast":null,"code":"var _jsxFileName = \"/Users/jakestraptop/Desktop/React.Js/jake_budget_app/src/Components/BudgetCard.js\";\nimport { Card, ProgressBar, Stack, Button } from \"react-bootstrap\";\nimport { currencyFormatter } from \"../utils\"; // Currency Formatter \n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function BudgetCard(_ref) {\n  let {\n    name,\n    amount,\n    max,\n    gray,\n    onAddExpenseClick,\n    hideButtons,\n    onViewExpenseClick\n  } = _ref;\n  // Create an empty array\n  const classNames = []; // If the amount is larger than the max value, then change the color to red and the opacity to 10\n\n  if (amount > max) {\n    classNames.push(\"bg-danger\", \"bg-opacity-10\");\n  } // If the amount is grey, then use light grey \n  else if (gray) {\n    classNames.push(\"bg-light\");\n  }\n\n  return /*#__PURE__*/_jsxDEV(Card, {\n    className: classNames.join(\" \"),\n    children: /*#__PURE__*/_jsxDEV(Card.Body, {\n      children: [/*#__PURE__*/_jsxDEV(Card.Title, {\n        className: \"d-flex  align-items-baseline fw-normal mb-3\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"me-2 \",\n          children: [\" \", name, \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"d-flex align-items-baseline\",\n          children: [currencyFormatter.format(amount), max && /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"text-muted fs-6 ms-1\",\n            children: [\"/\", currencyFormatter.format(max)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 36,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 17\n      }, this), max && /*#__PURE__*/_jsxDEV(ProgressBar, {\n        className: \"rounded-pill\",\n        variant: getProgressBarVariant(amount, max),\n        min: 0,\n        max: max,\n        now: amount\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 21\n      }, this), !hideButtons && /*#__PURE__*/_jsxDEV(Stack, {\n        direction: \"horizontal\",\n        gap: \"2\",\n        className: \"mt-4\",\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          variant: \"outline-primary\",\n          className: \"ms-auto\",\n          onClick: onAddExpenseClick,\n          children: \"Add Expense\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"outline-secondary\",\n          onClick: onViewExpenseClick,\n          children: \"View Expenses\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 9\n  }, this);\n} // This function will change the colors based on the severity of the debt \n\n_c = BudgetCard;\n\nfunction getProgressBarVariant(amount, max) {\n  const ratio = amount / max; // Get the ratio of the values passed in\n\n  if (ratio < .5) return \"primary\"; // If its under 50%, then its all good, keep the primary color\n\n  if (ratio < .75) return \"warning\"; // If its over 75%, we might want to start getting a lil worried\n\n  return \"danger\"; // Anything else... We Fucked... \n}\n\nvar _c;\n\n$RefreshReg$(_c, \"BudgetCard\");","map":{"version":3,"sources":["/Users/jakestraptop/Desktop/React.Js/jake_budget_app/src/Components/BudgetCard.js"],"names":["Card","ProgressBar","Stack","Button","currencyFormatter","BudgetCard","name","amount","max","gray","onAddExpenseClick","hideButtons","onViewExpenseClick","classNames","push","join","format","getProgressBarVariant","ratio"],"mappings":";AAAA,SAAQA,IAAR,EAAcC,WAAd,EAA2BC,KAA3B,EAAkCC,MAAlC,QAA+C,iBAA/C;AACA,SAASC,iBAAT,QAAkC,UAAlC,C,CAA8C;;;AAE9C,eAAe,SAASC,UAAT,OAQR;AAAA,MAR4B;AAC/BC,IAAAA,IAD+B;AAE/BC,IAAAA,MAF+B;AAG/BC,IAAAA,GAH+B;AAI/BC,IAAAA,IAJ+B;AAK/BC,IAAAA,iBAL+B;AAM/BC,IAAAA,WAN+B;AAO/BC,IAAAA;AAP+B,GAQ5B;AAEH;AACA,QAAMC,UAAU,GAAG,EAAnB,CAHG,CAKH;;AACA,MAAGN,MAAM,GAAGC,GAAZ,EAAiB;AACbK,IAAAA,UAAU,CAACC,IAAX,CAAgB,WAAhB,EAA6B,eAA7B;AACH,GAFD,CAGA;AAHA,OAIK,IAAIL,IAAJ,EAAU;AACXI,IAAAA,UAAU,CAACC,IAAX,CAAgB,UAAhB;AACH;;AAED,sBACI,QAAC,IAAD;AAAM,IAAA,SAAS,EAAED,UAAU,CAACE,IAAX,CAAgB,GAAhB,CAAjB;AAAA,2BACI,QAAC,IAAD,CAAM,IAAN;AAAA,8BACI,QAAC,IAAD,CAAM,KAAN;AAAY,QAAA,SAAS,EAAC,6CAAtB;AAAA,gCACI;AAAK,UAAA,SAAS,EAAC,OAAf;AAAA,0BAAyBT,IAAzB;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI;AAAK,UAAA,SAAS,EAAC,6BAAf;AAAA,qBACKF,iBAAiB,CAACY,MAAlB,CAAyBT,MAAzB,CADL,EAIKC,GAAG,iBACA;AAAM,YAAA,SAAS,EAAC,sBAAhB;AAAA,4BAEKJ,iBAAiB,CAACY,MAAlB,CAAyBR,GAAzB,CAFL;AAAA;AAAA;AAAA;AAAA;AAAA,kBALR;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,EAgBKA,GAAG,iBACA,QAAC,WAAD;AACI,QAAA,SAAS,EAAC,cADd;AAEI,QAAA,OAAO,EAAES,qBAAqB,CAACV,MAAD,EAASC,GAAT,CAFlC;AAGI,QAAA,GAAG,EAAE,CAHT;AAII,QAAA,GAAG,EAAEA,GAJT;AAKI,QAAA,GAAG,EAAED;AALT;AAAA;AAAA;AAAA;AAAA,cAjBR,EAyBK,CAACI,WAAD,iBACG,QAAC,KAAD;AAAO,QAAA,SAAS,EAAC,YAAjB;AAA8B,QAAA,GAAG,EAAC,GAAlC;AAAsC,QAAA,SAAS,EAAC,MAAhD;AAAA,gCACI,QAAC,MAAD;AACI,UAAA,OAAO,EAAC,iBADZ;AAEI,UAAA,SAAS,EAAC,SAFd;AAGI,UAAA,OAAO,EAAED,iBAHb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,eAQI,QAAC,MAAD;AAAQ,UAAA,OAAO,EAAC,mBAAhB;AAAoC,UAAA,OAAO,EAAEE,kBAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBARJ;AAAA;AAAA;AAAA;AAAA;AAAA,cA1BR;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AA4CH,C,CAGD;;KArEwBP,U;;AAsExB,SAASY,qBAAT,CAA+BV,MAA/B,EAAuCC,GAAvC,EAA4C;AACxC,QAAMU,KAAK,GAAGX,MAAM,GAAGC,GAAvB,CADwC,CACb;;AAC3B,MAAIU,KAAK,GAAG,EAAZ,EAAgB,OAAO,SAAP,CAFwB,CAEP;;AACjC,MAAIA,KAAK,GAAG,GAAZ,EAAiB,OAAO,SAAP,CAHuB,CAGN;;AAClC,SAAO,QAAP,CAJwC,CAIxB;AACnB","sourcesContent":["import {Card, ProgressBar, Stack, Button} from \"react-bootstrap\"; \nimport { currencyFormatter } from \"../utils\"; // Currency Formatter \n \nexport default function BudgetCard({\n    name, \n    amount, \n    max, \n    gray, \n    onAddExpenseClick, \n    hideButtons,\n    onViewExpenseClick, \n    }) {\n\n    // Create an empty array\n    const classNames = [ ] \n\n    // If the amount is larger than the max value, then change the color to red and the opacity to 10\n    if(amount > max) { \n        classNames.push(\"bg-danger\", \"bg-opacity-10\")\n    }\n    // If the amount is grey, then use light grey \n    else if (gray) { \n        classNames.push(\"bg-light\")\n    }\n    \n    return (\n        <Card className={classNames.join(\" \")}>\n            <Card.Body>\n                <Card.Title className=\"d-flex  align-items-baseline fw-normal mb-3\">\n                    <div className=\"me-2 \"> {name} </div>\n                    <div className=\"d-flex align-items-baseline\">\n                        {currencyFormatter.format(amount)}\n    \n                        {/* If there is no max value (There wont be one in expenses) dont show the max value since it will be NaN */}\n                        {max && (\n                            <span className=\"text-muted fs-6 ms-1\">\n                                /{/* Currency Formatter */}\n                                {currencyFormatter.format(max)}\n                            </span>\n                        )}\n                    </div>\n                </Card.Title>\n                {/* If there is no max value (There wont be in an expense) dont show the progress bar */}\n                {max && (\n                    <ProgressBar\n                        className=\"rounded-pill\"\n                        variant={getProgressBarVariant(amount, max)}\n                        min={0}\n                        max={max}\n                        now={amount}\n                    />\n                )}\n                {!hideButtons && (\n                    <Stack direction=\"horizontal\" gap=\"2\" className=\"mt-4\">\n                        <Button\n                            variant=\"outline-primary\"\n                            className=\"ms-auto\"\n                            onClick={onAddExpenseClick}\n                        >\n                            Add Expense\n                        </Button>\n                        <Button variant=\"outline-secondary\" onClick={onViewExpenseClick}>\n                            View Expenses\n                        </Button>\n                    </Stack>\n                )}\n            </Card.Body>\n        </Card>\n    );\n}\n\n\n// This function will change the colors based on the severity of the debt \nfunction getProgressBarVariant(amount, max) { \n    const ratio = amount / max // Get the ratio of the values passed in\n    if (ratio < .5) return \"primary\" // If its under 50%, then its all good, keep the primary color\n    if (ratio < .75) return \"warning\" // If its over 75%, we might want to start getting a lil worried\n    return \"danger\" // Anything else... We Fucked... \n}\n"]},"metadata":{},"sourceType":"module"}