{"ast":null,"code":"var _s = $RefreshSig$();\n\n// This will save the budgets on local storage \nimport { useState, useEffect } from \"react\"; // The function will take in a key along with a default value \n\nexport default function useLocalStorage(key, defaultValue) {\n  _s();\n\n  // use useState to get the starting value from local storage \n  const [value, setValue] = useState(() => {\n    const jsonValue = localStorage.getItem(key); // Get the item\n\n    if (jsonValue != null) return JSON.parse(jsonValue); // If there is a value, return the JSON \n    // If the typeOf value is a function. The reason we check this is because in useState. You can pass a function and a value. So we must check for both\n\n    if (typeof defaultValue === \"function\") {\n      return defaultValue(); // Return defaultValue() while calling it \n    } else {\n      return defaultValue; // Return the default value \n    }\n  }); // Use Effect will update the values when they change\n\n  useEffect(() => {\n    localStorage.setItem(key, JSON.stringify(value)); // Update the local Storage \n  }, [key, value]);\n  return [value, setValue];\n}\n\n_s(useLocalStorage, \"1c+kYiS+W/ljQ3cJZRmLrvYE58Q=\");","map":{"version":3,"sources":["/Users/jakestraptop/Desktop/React.Js/jake_budget_app/src/Hooks/useLocalStorage.js"],"names":["useState","useEffect","useLocalStorage","key","defaultValue","value","setValue","jsonValue","localStorage","getItem","JSON","parse","setItem","stringify"],"mappings":";;AAAA;AAEA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC,C,CAEA;;AACA,eAAe,SAASC,eAAT,CAAyBC,GAAzB,EAA8BC,YAA9B,EAA4C;AAAA;;AACvD;AACA,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBN,QAAQ,CAAC,MAAM;AACrC,UAAMO,SAAS,GAAGC,YAAY,CAACC,OAAb,CAAqBN,GAArB,CAAlB,CADqC,CACO;;AAC5C,QAAII,SAAS,IAAI,IAAjB,EAAuB,OAAOG,IAAI,CAACC,KAAL,CAAWJ,SAAX,CAAP,CAFc,CAEe;AAEpD;;AACA,QAAI,OAAOH,YAAP,KAAwB,UAA5B,EAAwC;AACpC,aAAOA,YAAY,EAAnB,CADoC,CACd;AACzB,KAFD,MAEO;AACH,aAAOA,YAAP,CADG,CACiB;AACvB;AACJ,GAViC,CAAlC,CAFuD,CAcvD;;AACAH,EAAAA,SAAS,CAAC,MAAM;AACZO,IAAAA,YAAY,CAACI,OAAb,CAAqBT,GAArB,EAA0BO,IAAI,CAACG,SAAL,CAAeR,KAAf,CAA1B,EADY,CACqC;AACpD,GAFQ,EAEN,CAACF,GAAD,EAAME,KAAN,CAFM,CAAT;AAIA,SAAO,CAACA,KAAD,EAAQC,QAAR,CAAP;AACH;;GApBuBJ,e","sourcesContent":["// This will save the budgets on local storage \n\nimport { useState, useEffect } from \"react\" \n \n// The function will take in a key along with a default value \nexport default function useLocalStorage(key, defaultValue) { \n    // use useState to get the starting value from local storage \n    const [value, setValue] = useState(() => { \n        const jsonValue = localStorage.getItem(key) // Get the item\n        if (jsonValue != null) return JSON.parse(jsonValue) // If there is a value, return the JSON \n\n        // If the typeOf value is a function. The reason we check this is because in useState. You can pass a function and a value. So we must check for both\n        if (typeof defaultValue === \"function\") { \n            return defaultValue() // Return defaultValue() while calling it \n        } else { \n            return defaultValue // Return the default value \n        }\n    })\n\n    // Use Effect will update the values when they change\n    useEffect(() => {\n        localStorage.setItem(key, JSON.stringify(value)) // Update the local Storage \n    }, [key, value])\n\n    return [value, setValue]\n}\n\n"]},"metadata":{},"sourceType":"module"}